# Host: localhost  (Version: 5.5.27)
# Date: 2015-03-30 21:39:36
# Generator: MySQL-Front 5.3  (Build 4.198)

/*!40101 SET NAMES utf8 */;

#
# Structure for table "blog_blog"
#

DROP TABLE IF EXISTS `blog_blog`;
CREATE TABLE `blog_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_id` bigint(20) NOT NULL DEFAULT '0',
  `blog_type` varchar(255) NOT NULL DEFAULT '',
  `title` varchar(255) NOT NULL DEFAULT '',
  `author` varchar(255) NOT NULL DEFAULT '',
  `summary` varchar(500) NOT NULL DEFAULT '',
  `content` text NOT NULL,
  `category_name` varchar(255) NOT NULL DEFAULT '',
  `category_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

#
# Data for table "blog_blog"
#

INSERT INTO `blog_blog` VALUES (1,'2015-03-28 10:53:19','2015-03-28 10:53:19',1,'原创','阿里巴巴资讯','zhumengxiaoqi','请输入文章摘要，最多300字','请输入文章内容，最多8000字','android开发',1),(2,'2015-03-28 10:53:29','2015-03-28 10:53:29',1,'原创','阿里巴巴资讯','zhumengxiaoqi','请输入文章摘要，最多300字','请输入文章内容，最多8000字','android开发',1),(3,'2015-03-28 11:20:59','2015-03-28 11:20:59',1,'原创','阿里巴巴','zhumengxiaoqi','请输入文章摘要，最多300字','请输入文章内容，最多8000字','javaweb开发',2),(4,'2015-03-28 11:31:23','2015-03-28 11:31:23',1,'原创','阿里巴巴','zhumengxiaoqi','请输入文章摘要，最多300字','请输入文章内容，最多8000字','快学scala',3),(5,'2015-03-28 20:41:09','2015-03-28 20:41:09',1,'原创','基于http协议通信的APP安全策略的一点思考','zhumengxiaoqi','微信开发过程中，会使用到微信服务器提供的API，这些API都是基于HTTP协议调用的，为什么我们自己的APP服务器不采用这种方式呢？\r\n这种方式最直观的好处就是，API设计得足够好时，服务器只需要开发一次，无论前端是 WEB，APP ，APK...都通过http调用API请求数据并响应。\r\n这种方式类似于传统C/S模型的开发，服务端/客户端定义相同序列的数据结构（称之为通信协议','登录过程\r\n基于HTTP的APP会遇到服务器无状态问题，比如客户端发起API调用：GetUserInfo，服务器如何判断这个用户是谁？\r\n最先想到的就是，每一个API调用都带上用户的用户名和密码，这种方法确实太笨。\r\n这里提供一个思路是：服务器保存很多带有锁的盒子，盒子里存储用户信息，用户登录成功之后，获得一把钥匙，以后的用户请求就只需要提供这把钥匙，简单过程如下：\r\n1、用户提供用户名和密码发送登录请求\r\n2、服务器检查用户名和密码是否正确，错误则直接失败。若通过检查，则生成一把访问令牌，把用户信息放到这把访问令牌对应的的盒子里，向用户返回访问令牌。\r\n3、用户向服务器发出获取用户订单信息请求，并带上从服务器获取到的 访问令牌。\r\n4、服务器用访问令牌打开盒子，获取到用户的基本信息，再从数据库查出用户订单信息，返回用户。\r\n5、以后的用户和服务器交互重复 3、4步骤\r\n这主要参考了微信公众号的做法：微信公众号：获取用户信息\r\n\r\n微信公众号 要获取一个关注者的信息，需要的条件是 AccessToken和这个关注者的ID(OpenID)。并没有提供公众号信息，而是用一个AccessToken(访问令牌)代替，也就是说微信服务器保存了一个 < 访问令牌，公众号信息 > 列表，通过AccessToken可以获取到一个微信公众号相关信息。\r\n而这个AccessToken是怎么获取的呢？微信公众号：获取AccessToken\r\n\r\n微信公众号 要获取一个AccssToken需要提供 公众号ID(AppID)和一个密码(Secret)，这不是相当于提供用户名和密码去获取AccessToken（访问令牌）吗？\r\n\r\n通信过程的安全性\r\n从上面的的介绍可知，每次用户都会发送HTTP请求，一个典型的交互过程如下：以JSON数据格式为例\r\nRequest:\r\n[html] view plaincopy在CODE上查看代码片派生到我的代码片\r\n{  \r\n    \"Command\": \"GetOrderList\",  \r\n    \"AccessToken\": \"3bf63b28-bdd2-4bb1-80b0-8d5b42070222\"  \r\n}  \r\nResponse:\r\n[html] view plaincopy在CODE上查看代码片派生到我的代码片\r\n{  \r\n    \"success\": true,  \r\n    \"OrderList\": [  \r\n        {  \r\n            \"NO\": \"20150327131072\",  \r\n            \"OrderTime\": \"2015-03-27 09:33:20\",  \r\n            \"TotalCost\": 118,  \r\n            \"Detail\": [  \r\n                {  \r\n                    \"Product\": {  \r\n                        \"GUID\": \"4bb603b2-0916-412d-ae51-b296c838673b\",  \r\n                        \"Name\": \"时蔬锅摊\",  \r\n                        \"MainPicture\": \"5(8).JPG\"  \r\n                    },  \r\n                    \"Count\": 1,  \r\n                    \"Price\": 28  \r\n                },  \r\n                {  \r\n                    \"GUID\": \"630e38dd-60ae-4ed0-98f0-affea23c5fee\",  \r\n                    \"Product\": {  \r\n                        \"GUID\": \"da9dce4a-101e-45dc-a88e-3b5e296ca092\",  \r\n                        \"Name\": \"香锅猪蹄\",  \r\n                        \"MainPicture\": \"2(1).JPG\"  \r\n                    },  \r\n                    \"Count\": 1,  \r\n                    \"Price\": 58  \r\n                },  \r\n                {  \r\n                    \"GUID\": \"6018c248-64e2-4185-98db-c1408aa0d482\",  \r\n                    \"Product\": {  \r\n                        \"GUID\": \"a405b104-f0eb-488c-ac41-a8a3de2f0bca\",  \r\n                        \"Name\": \"农家酥肉汤\",  \r\n                        \"MainPicture\": \"7(10).JPG\"  \r\n                    },  \r\n                    \"Count\": 1,  \r\n                    \"Price\": 32  \r\n                }  \r\n            ]  \r\n        },  \r\n        {  \r\n            \"NO\": \"20150325131079\",  \r\n            \"OrderTime\": \"2015-03-25 17:38:15\",  \r\n            \"TotalCost\": 58,  \r\n            \"Status\": 2,  \r\n            \"Detail\": [  \r\n                {  \r\n                    \"GUID\": \"77df4888-8c88-4c51-b669-7471a8ae975b\",  \r\n                    \"Product\": {  \r\n                        \"GUID\": \"da9dce4a-101e-45dc-a88e-3b5e296ca092\",  \r\n                        \"Name\": \"香锅猪蹄\",  \r\n                        \"MainPicture\": \"2(1).JPG\"  \r\n                    },  \r\n                    \"Count\": 1,  \r\n                    \"Price\": 58  \r\n                }  \r\n            ]  \r\n        }  \r\n    ]  \r\n}  \r\n可以看到，用户获取自己的订单，提供了 访问令牌 ，返回用户订单，这里展示下显示效果~  羡慕\r\n\r\n从上面通信过程可以看到，均是由明文在网络中传输中，，而对于用户订单这么敏感的数据，实在不妥。一旦在传输过程中，这个 访问令牌 被截获，后果不堪设想，也就是说我们要想办法去保证传输过程中的安全性。\r\n一想到传输过程中的安全性，我们一下就想到了HTTPS，对传输的所有数据都进行加密。HTTPS无疑可以解决这个问题，它被设计的目的就是为了保证传输过程中的安全性。\r\n当我们安全性不需要做到像 银行 那种级别，HTTPS是否是最佳的方案呢？我看未必，你可以向下看，接下来提供一种思路。\r\n参考QQ邮箱的做法： QQ邮箱登陆页面\r\n登录页面\r\n\r\n登录成功之后的页面 （这个是我QQ邮箱，欢迎来信）\r\n\r\n\r\n注意到了吗，登陆的页面采用 HTTPS ，成功之后采用普通  HTTP 协议！这就是方法！\r\n我们的思路，用户登录的 API 需要HTTPS，获取到对称加密钥匙(Key)，以后的数据通信双方均采用这个密匙进行对称加密(AES)，通信过程只需之前的方式下，外包一个加解密壳，过程如下：\r\n1、用户提供用户名和密码，通过发起HTTPS的登录请求\r\n2、服务器验证登录信息正确性。若失败，则返回错误；若通过，则生成一个打开用户信息盒子的AccessToken(访问令牌) 和 后面数据对称加密的密匙(Key)，把AccessToken，Key和用户信息存入盒子中，盒子的数据用 AccessToken进行索引\r\n3、用户通过HTTP调用API，但JSON数据需要用 Key 进行对称加密\r\n4、服务器解密数据，执行用户请求，并用 Key加密之后，把数据返回。\r\n5、以后的通信重复 3、4\r\n这里给出 Web端测试代码(cryptoJS实现)，服务端(C# 实现)源码 。AES加解密这儿除了Key外，额外需要提供 IV\r\n\r\n\r\n逻辑上的疏漏\r\n按照上面的描述，一次典型的请求过程如下：\r\nRequestURL： http://aa.com.cn/orders\r\n携带了 {\"Key\":\"3bf63b28-bdd2-4bb1-80b0-8d5b42070222\"}  通过AES加密之后的数据\r\n问题是：服务器收到请求之后，它应该用哪一个盒子的Key(密匙)去解密呢？服务器没有任何判断依据。\r\n这里给出一个思路，每次请求在URL中带上Token： http://aa.com.cn/orders？AccessToken= 3bf63b28-bdd2-4bb1-80b0-8d5b42070222，服务器通过AccessToken索引到盒子并打开，拿出 用户信息和加解密的Key\r\n\r\n引入的新问题：URL的安全性\r\n为了避免逻辑上的疏漏，在不知不觉中引入了新问题：当向服务器请求订单列表时，请求过程中我们仅仅提供了一个URL： http://aa.com.cn/orders？AccessToken= 3bf63b28-bdd2-4bb1-80b0-8d5b42070222\r\n要是用户这个URL被泄露了，是否意味我们返回给用户的数据已经暴露(虽然是AES加密)，因为在用户未退出系统之前，任何人都可以通过请求这个URL获取到数据！！！\r\n目前用户手里具有的资料是：Key，AccessToken，截获URL的人已经知道 AccessToken，唯一不知道的就是Key。\r\n这里我给出思路来自于签名，如何利用这个截获者不知道的Key来保护用户的URL，主要参考了 微信支付 的生成支付链接的方法，大体思路是：\r\n1、用户对URL增加 时间戳 和 随机字符串 参数   http://aa.com.cn/orders？AccessToken= 3bf63b28-bdd2-4bb1-80b0-8d5b42070222 & Nonstr=kgekgekghe42g4ea2w & Timestamp=145246512\r\n2、用户对URL的参数进行 MD5/SH1 进行签名，方式如下 ：Sign = MD5(资源URL + AccessToken + Nostr + Timestamp + Key)，然后把sign填在原生的URL后面生成正真的请求URL\r\n参数说明：\r\n资源URL = http://aa.com.cn/orders\r\nAccessToken = 3bf63b28-bdd2-4bb1-80b0-8d5b42070222\r\nNonstr = kgekgekghe42g4ea2w\r\nTimestamp = 145246512\r\nKey = 12345678     (保存在用户的内存中，由服务器生成，HTTPS传回)\r\n计算 Sign = MD5(http://aa.com.cn/orders3bf63b28-bdd2-4bb1-80b0-8d5b42070222kgekgekghe42g4ea2w14524651212345678) = gehhgeiklajkidjkie3uit3u9uoidiguyiffjkk\r\n\r\n3、用户发起HTTP请求，URL = http://aa.com.cn/orders？AccessToken= 3bf63b28-bdd2-4bb1-80b0-8d5b42070222 & Nonstr=kgekgekghe42g4ea2w & Timestamp=145246512 & Sign = gehhgeiklajkidjkie3uit3u9uoidiguyiffjkk\r\n4、服务器验证URL 的时间戳：如果和当前系统的时间戳差得太远，则判定请求不合法。\r\n5、服务器验证 Sign：通过 AccessToken打开盒子，取出 Key ，同样用MD5签名，对比Sign值是否合法，不合法则判定请求不合法。\r\n6、响应用户请求，返回AES加密之后的数据\r\n\r\n以上，是我对于以HTTP作为通信方式的APP开发上保证数据安全的想法，希望起到抛砖引玉作用，欢迎留言讨论，质疑。','数据结构',4),(6,'2015-03-29 12:51:55','2015-03-29 12:51:55',1,'原创','测试发表文章啦，我来试试','zhumengxiaoqi','       主要是来车市的啦阿法拉就浪费国家酸辣粉将阿里房间爱龙卷风拉斯加放辣椒发觉房间爱减肥就爱死了飞机阿拉斯加发垃圾费垃圾费垃圾分类近啊\r\n        测试一下换行还有段落的开头啦\r\n         不会不改变的啊','       主要是来车市的啦阿法拉就浪费国家酸辣粉将阿里房间爱龙卷风拉斯加放辣椒发觉房间爱减肥就爱死了飞机阿拉斯加发垃圾费垃圾费垃圾分类近啊\r\n        测试一下换行还有段落的开头啦\r\n         不会不改变的啊达拉斯江楼感旧阿斯利康感觉阿狸说过了就阿里解放辣椒水立方加拉斯加放辣椒是浪费就爱死了几分拉丝机发链接垃圾费垃圾是浪费就爱死了房间爱上了房间爱设计费拉设计费就发了就爱死了房间爱斯拉夫捡垃圾法术连击菲拉斯减肥拉丝机法拉盛减肥拉萨减肥了减肥拉伸件法律撒酒疯拉萨减肥了撒娇拉萨减肥了快速减肥林俊杰垃圾费拉丝机佛为减肥偶就拉法基偶奇偶文件就哦金融佛旺旺全家捡垃圾肥肉阿拉斯加垃圾费拉搜救哦我叫你来刷卡费那个谁拉怪了撒娇龙卷风拉丝机龙卷风拉萨婕拉法拉盛减肥咯今晚佛文件佛为减肥哦缴费机我饿哦就哦见佛叫我饿哦就荣威金融哦我加我房间叫哦我就偶发文件哦人就爱我房间爱死了飞机拉商务金融iwejfomasl叫哦我就\r\n       主要是来车市的啦阿法拉就浪费国家酸辣粉将阿里房间爱龙卷风拉斯加放辣椒发觉房间爱减肥就爱死了飞机阿拉斯加发垃圾费垃圾费垃圾分类近啊\r\n        测试一下换行还有段落的开头啦\r\n         不会不改变的啊达拉斯江楼感旧阿斯利康感觉阿狸说过了就阿里解放辣椒水立方加拉斯加放辣椒是浪费就爱死了几分拉丝机发链接垃圾费垃圾是浪费就爱死了房间爱上了房间爱设计费拉设计费就发了就爱死了房间爱斯拉夫捡垃圾法术连击菲拉斯减肥拉丝机法拉盛减肥拉萨减肥了减肥拉伸件法律撒酒疯拉萨减肥了撒娇拉萨减肥了快速减肥林俊杰垃圾费拉丝机佛为减肥偶就拉法基偶奇偶文件就哦金融佛旺旺全家捡垃圾肥肉阿拉斯加垃圾费拉搜救哦我叫你来刷卡费那个谁拉怪了撒娇龙卷风拉丝机龙卷风拉萨婕拉法拉盛减肥咯今晚佛文件佛为减肥哦缴费机我饿哦就哦见佛叫我饿哦就荣威金融哦我加我房间叫哦我就偶发文件哦人就爱我房间爱死了飞机拉商务金融iwejfomasl叫哦我就\r\n       主要是来车市的啦阿法拉就浪费国家酸辣粉将阿里房间爱龙卷风拉斯加放辣椒发觉房间爱减肥就爱死了飞机阿拉斯加发垃圾费垃圾费垃圾分类近啊\r\n        测试一下换行还有段落的开头啦\r\n         不会不改变的啊达拉斯江楼感旧阿斯利康感觉阿狸说过了就阿里解放辣椒水立方加拉斯加放辣椒是浪费就爱死了几分拉丝机发链接垃圾费垃圾是浪费就爱死了房间爱上了房间爱设计费拉设计费就发了就爱死了房间爱斯拉夫捡垃圾法术连击菲拉斯减肥拉丝机法拉盛减肥拉萨减肥了减肥拉伸件法律撒酒疯拉萨减肥了撒娇拉萨减肥了快速减肥林俊杰垃圾费拉丝机佛为减肥偶就拉法基偶奇偶文件就哦金融佛旺旺全家捡垃圾肥肉阿拉斯加垃圾费拉搜救哦我叫你来刷卡费那个谁拉怪了撒娇龙卷风拉丝机龙卷风拉萨婕拉法拉盛减肥咯今晚佛文件佛为减肥哦缴费机我饿哦就哦见佛叫我饿哦就荣威金融哦我加我房间叫哦我就偶发文件哦人就爱我房间爱死了飞机拉商务金融iwejfomasl叫哦我就\r\n       主要是来车市的啦阿法拉就浪费国家酸辣粉将阿里房间爱龙卷风拉斯加放辣椒发觉房间爱减肥就爱死了飞机阿拉斯加发垃圾费垃圾费垃圾分类近啊\r\n        测试一下换行还有段落的开头啦\r\n         不会不改变的啊达拉斯江楼感旧阿斯利康感觉阿狸说过了就阿里解放辣椒水立方加拉斯加放辣椒是浪费就爱死了几分拉丝机发链接垃圾费垃圾是浪费就爱死了房间爱上了房间爱设计费拉设计费就发了就爱死了房间爱斯拉夫捡垃圾法术连击菲拉斯减肥拉丝机法拉盛减肥拉萨减肥了减肥拉伸件法律撒酒疯拉萨减肥了撒娇拉萨减肥了快速减肥林俊杰垃圾费拉丝机佛为减肥偶就拉法基偶奇偶文件就哦金融佛旺旺全家捡垃圾肥肉阿拉斯加垃圾费拉搜救哦我叫你来刷卡费那个谁拉怪了撒娇龙卷风拉丝机龙卷风拉萨婕拉法拉盛减肥咯今晚佛文件佛为减肥哦缴费机我饿哦就哦见佛叫我饿哦就荣威金融哦我加我房间叫哦我就偶发文件哦人就爱我房间爱死了飞机拉商务金融iwejfomasl叫哦我就','测试新建分来',5),(7,'2015-03-29 14:14:59','2015-03-29 14:14:59',1,'原创','阿里巴巴','zhumengxiaoqi','<h1>\r\n\t&nbsp; &nbsp; &nbsp; &nbsp;大大的撒旦阿嘎 sda\r\n</h1>\r\n<p>\r\n\t&nbsp; &nbsp; &nbsp; &nbsp;飞洒发沙发啊发顺丰的撒\r\n</p>','<p>\r\n\t&nbsp; &nbsp; &nbsp; &nbsp;阿三发生过阿发撒啊\r\n</p>\r\n<p>\r\n\t啊嘎嘎\r\n</p>\r\n<p>\r\n\t阿嘎啊阿萨斯噶\r\n</p>\r\n<p>\r\n\t<br />\r\n</p>\r\n<p>\r\n\t阿嘎嘎嘎阿<span style=\"background-color:#E53333;\">嘎嘎嘎啊</span>&nbsp;<span style=\"background-color:#E53333;\"></span>\r\n</p>','java',6),(8,'2015-03-29 14:35:13','2015-03-29 14:35:13',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7),(9,'2015-03-29 14:35:14','2015-03-29 14:35:14',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7);
INSERT INTO `blog_blog` VALUES (10,'2015-03-29 14:35:14','2015-03-29 14:35:14',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7),(11,'2015-03-29 14:35:14','2015-03-29 14:35:14',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7),(12,'2015-03-29 14:35:14','2015-03-29 14:35:14',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7);
INSERT INTO `blog_blog` VALUES (13,'2015-03-29 14:35:14','2015-03-29 14:35:14',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7),(14,'2015-03-29 14:35:14','2015-03-29 14:35:14',1,'原创','spring redis入门','zhumengxiaoqi','sfsf','<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) 编译后src文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281839293179744.png\" alt=\"\" width=\"556\" height=\"300\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t红色部分文件都分别复制过去\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-benchmark /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-cli /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis-server /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) 编译后主文件夹下\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281842507391180.png\" alt=\"\" width=\"556\" height=\"36\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcp redis.conf /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t乾坤大挪移施展好后，让我们看看redis程序的文件夹是什么样子的吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tcd /usr/local/redis\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281845116452428.png\" alt=\"\" width=\"556\" height=\"108\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tOK，万事俱备，只欠startup了，now 让我们轻轻的输入启动命令:\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t./redis-server ./redis.conf\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281849461928703.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t想在后台运行？觉得命令太烦不爽？想设置成开机自启动？那就nohup...&amp;一下，把命令加入到path中，再把它写入到rc.local里面吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t自己百度吧，这里就不详述了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t刚才我们是用默认的方式启动服务器端的，默认的hostName是localhost，port是6379，你也可以编辑redis.conf改变他们。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好了，redis服务端启动后让我们使用客户端连接下。输入redis-cli 即可（默认是连接到localhost的6379端口）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281856147557377.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里keys *命令的意思是查看redis数据库里目前有哪些内容。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t我们可以简单的输入几个redis命令来测试一下。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281904096144116.png\" alt=\"\" width=\"556\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t更多命令，敬请访问，三达不溜点度娘点康姆。这里就不细说了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注：第二部分java是在windows耍的，而要访问linux主机上的redis，还需要“走后门”，你需要做的是在iptables配置里面添加6379为防火墙例外端口，并重启一下iptables服务即可。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tvi /etc/sysconf/iptables\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t加点佐料\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tservice iptables restart\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2. 访问redis的java程序的编写\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们就直接写测试用例吧，直接用spring+junit就行了，做到简洁大方就行，铺张浪费可耻啊。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tmaven兄，出来耍耍吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t<img src=\"http://images.cnitblog.com/blog2015/408505/201503/281932234427490.png\" alt=\"\" />\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t项目的结构就是酱紫的。下面详述一下各个文件里面的内容吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t1) pom.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为保姆maven的专属区域，里面定义了要用到的包，要用到的是spring（包括core、context），junit，jedis和spring-data-redis。spring-data-redis是spring在jedis的基础上再次进行了封装，让我们用起来更爽。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就直接上依赖包的代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre>    <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> junit </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>junit<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>4.11<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>redis.clients<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>jedis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>2.1.0<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-core<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-context<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>3.1.2.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#008000;\">&lt;!--</span><span style=\"line-height:1.8;color:#008000;\"> spring data redis </span><span style=\"line-height:1.8;color:#008000;\">--&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>org.springframework.data<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">groupId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>spring-data-redis<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">artifactId</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span>1.1.1.RELEASE<span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">version</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependency</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">dependencies</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t不多说，保姆赶紧干活去。 （Maven童鞋：T_T 你这带宽让我很无语）\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t2) spring-redis.xml\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\tspring的xml，里面当然是配置bean的喽。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">&lt;?</span><span style=\"line-height:1.8;color:#FF00FF;\">xml version=\"1.0\" encoding=\"UTF-8\"</span><span style=\"line-height:1.8;color:#0000FF;\">?&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">beans </span><span style=\"line-height:1.8;color:#FF0000;\">xmlns</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:xsi</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.w3.org/2001/XMLSchema-instance\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:context</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/context\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xmlns:tx</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/tx\"</span><span style=\"line-height:1.8;color:#FF0000;\"> xsi:schemaLocation</span><span style=\"line-height:1.8;color:#0000FF;\">=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\r\n                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\r\n                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">context:property-placeholder </span><span style=\"line-height:1.8;color:#FF0000;\">location</span><span style=\"line-height:1.8;color:#0000FF;\">=\"classpath:redis.properties\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"hostName\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${hostName}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"port\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${port}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"database\"</span><span style=\"line-height:1.8;color:#FF0000;\"> value</span><span style=\"line-height:1.8;color:#0000FF;\">=\"${index}\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">bean </span><span style=\"line-height:1.8;color:#FF0000;\">id</span><span style=\"line-height:1.8;color:#0000FF;\">=\"redisTemplate\"</span><span style=\"line-height:1.8;color:#FF0000;\"> class</span><span style=\"line-height:1.8;color:#0000FF;\">=\"org.springframework.data.redis.core.StringRedisTemplate\"</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;</span><span style=\"line-height:1.8;color:#800000;\">property </span><span style=\"line-height:1.8;color:#FF0000;\">name</span><span style=\"line-height:1.8;color:#0000FF;\">=\"connectionFactory\"</span><span style=\"line-height:1.8;color:#FF0000;\"> ref</span><span style=\"line-height:1.8;color:#0000FF;\">=\"jedisConnectionFactory\"</span> <span style=\"line-height:1.8;color:#0000FF;\">/&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">bean</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span> <span style=\"line-height:1.8;color:#0000FF;\">&lt;/</span><span style=\"line-height:1.8;color:#800000;\">beans</span><span style=\"line-height:1.8;color:#0000FF;\">&gt;</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里用到了一个小技巧，一些基础的配置信息我可能不想要写到xml里面，为毛呢，因为在linux下面用vi编辑格式会乱，有点小洁癖的我更愿意去编辑properties文件，key=value的形式更容易编辑，格式也不会紊乱。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t那么？就用property placeholder吧，配置起来超简单，要用某个key的时候只需要${key}这样写就可以了。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t这里我们需要定义两个spring-data-redis为我们封装好的对象，一个是JedisConnectionFactory，是不是有点连接池之类的味道了，典型的工厂模式，从connection factory里面可以拿到redis的连接对象，然后用这个connection对象YY一下，然后可能LOL。。。；另外一个是StringRedisTemplate对象，又有点JdbcTemplate的味道了，典型的模板方法模式，通过这个template对象我们就可以进行CRUD了，只不过JdbcTemplate是针对关系型数据库的，而这个RedisTemplate是针对redis非关系型数据库的。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t注意点：这里的redisTemplate我们不是用的基类RedisTemplate的对象（可能有些教程文章就用它，如果你的redis里已经有了字符串作为key/value的数据，那么小心出错），而是其子类StringRedisTemplate。在redis里面进行CRUD时，用的最多的就是String，例如字符串作为key、作为value、作为hashmap的key或value，而基类RedisTemplate默认的序列化/反序列化操作（它使用的是JdkSerializationRedisSerializer类）不是针对字符串的，更确切的来说，RedisTemplate类里面的序列化/反序列化工具对字符串/字节数组进行处理后的结果不是我们想要的结果。子类StringRedisTemplate里面的序列化/反序列化工具是StringRedisSerializer类的实例，该类是我们想要的，因此这边我们用了StringRedisTemplate的实例。有兴趣的童鞋可以试一下，如果使用的是RedisTemplate类的实例，对redis进行写操作的时候，写入的会是什么样的数据。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t&nbsp;3) redis.properties\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t存放redis的配置信息。在第二点里也说了，具体的redis的服务器端配置信息，我们写在这个文件里。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n<pre>hostName=192.168.1.225\r\nport=6379\r\nindex=0</pre>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t就跟mysql等数据库一样，一个redis服务上也能有多个数据库，redis默认连接的是0号库，默认有16个数据库，这里的配置index是指几号数据库，范围0~15，如果你想扩大容量，请自行修改redis.conf。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t4) RedisTest.java\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t终于轮到猪脚登场了。咱们先看代码吧。\r\n</p>\r\n<div class=\"cnblogs_code\" style=\"margin:5px 0px;padding:5px;border:1px solid #CCCCCC;font-family:\'Courier New\' !important;background-color:#F5F5F5;\">\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n<pre><span style=\"line-height:1.8;color:#0000FF;\">package</span><span style=\"line-height:1.8;\"> code.selwyn.spring.redis.demo.test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Assert; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Before; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.junit.Test; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.ApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.context.support.ClassPathXmlApplicationContext; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.RedisTemplate; </span><span style=\"line-height:1.8;color:#0000FF;\">import</span><span style=\"line-height:1.8;\"> org.springframework.data.redis.core.ValueOperations; </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\"> * Class RedisTest\r\n * 耍耍redis\r\n *\r\n * </span><span style=\"line-height:1.8;color:#808080;\">@author</span><span style=\"line-height:1.8;color:#008000;\"> Selwyn\r\n * Date: Mar 28, 2015 7:15:57 PM </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">class</span><span style=\"line-height:1.8;\"> RedisTest { </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * spring配置文件 </span><span style=\"line-height:1.8;color:#008000;\">*/</span> <span style=\"line-height:1.8;color:#0000FF;\">private</span> <span style=\"line-height:1.8;color:#0000FF;\">final</span> <span style=\"line-height:1.8;color:#0000FF;\">static</span> String[] CONFIG_LOC =<span style=\"line-height:1.8;\"> { </span>\"spring-redis.xml\"<span style=\"line-height:1.8;\"> }; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span> ApplicationContext appContext = <span style=\"line-height:1.8;color:#0000FF;\">null</span><span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#0000FF;\">private</span><span style=\"line-height:1.8;\"> ApplicationContext getAppContext()\r\n    { </span><span style=\"line-height:1.8;color:#0000FF;\">return</span> <span style=\"line-height:1.8;color:#0000FF;\">new</span><span style=\"line-height:1.8;\"> ClassPathXmlApplicationContext(CONFIG_LOC);\r\n    }\r\n    @Before </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> setUp()\r\n    { </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">读取spring配置文件，载入到spring上下文</span> <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext = <span style=\"line-height:1.8;color:#0000FF;\">this</span><span style=\"line-height:1.8;\">.getAppContext();\r\n    } </span><span style=\"line-height:1.8;color:#008000;\">/**</span><span style=\"line-height:1.8;color:#008000;\">*\r\n     * 测试redis单值读取与写入 </span><span style=\"line-height:1.8;color:#008000;\">*/</span><span style=\"line-height:1.8;\"> @Test </span><span style=\"line-height:1.8;color:#0000FF;\">public</span> <span style=\"line-height:1.8;color:#0000FF;\">void</span><span style=\"line-height:1.8;\"> testRedisValueOperation()\r\n    {\r\n        RedisTemplate template </span>= (RedisTemplate) <span style=\"line-height:1.8;color:#0000FF;\">this</span>.appContext.getBean(\"redisTemplate\"<span style=\"line-height:1.8;\">); </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">单值操作的对象，通过该对象直接可以对redis进行CRUD(单值操作)</span> ValueOperations&lt;String, String&gt; valueOper =<span style=\"line-height:1.8;\"> template.opsForValue();\r\n        \r\n        String key </span>= \"cat\"<span style=\"line-height:1.8;\">;\r\n        String valueExpected </span>= \"tom\"<span style=\"line-height:1.8;\">;\r\n        \r\n        String value </span>=<span style=\"line-height:1.8;\"> valueOper.get(key);\r\n        Assert.assertNotNull(value);\r\n        Assert.assertEquals(</span>\"The cat is not Tom!!!\"<span style=\"line-height:1.8;\">, valueExpected, value);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,value));\r\n        \r\n        String newValue </span>= \"hello kitty\"<span style=\"line-height:1.8;\">; </span><span style=\"line-height:1.8;color:#008000;\">//</span><span style=\"line-height:1.8;color:#008000;\">设置新值</span> <span style=\"line-height:1.8;\"> valueOper.set(key, newValue);\r\n        System.out.println(</span>\"After changing...\"<span style=\"line-height:1.8;\">);\r\n        System.out.println(String.format(</span>\"%s-&gt;%s\"<span style=\"line-height:1.8;\">,key,valueOper.get(key)));\r\n    }\r\n}</span></pre>\r\n\t<div class=\"cnblogs_code_toolbar\" style=\"margin:5px 0px 0px;padding:0px;\">\r\n\t\t<span class=\"cnblogs_code_copy\" style=\"line-height:1.8;\"><a><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span>\r\n\t</div>\r\n</div>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t作为一个Test类，针对的是一个功能类的测试，里面会有多个测试用例，而每个测试用例都可能会在开始前进行配置，测试跑完后会进行收尾工作（比如断开连接啊什么的），junit提供了两个annotation给我们，一个是@Before，一个是@After。对于单个测试方法（以@Test标识），它的执行顺序是@Before指定方法-&gt;@Test指定的方法-&gt;@After指定的方法。当然如果这个Test类里面的所有测试用例加载的配置都一样，结束后又都进行相同的收尾操作，那么我们可以用另外两个annotation，@BeforeClass和@AfterClass，我们现在就只有一个测试用例，就按常规来吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t对于这个测试方法的前置工作，当然是让spring帮我们盖一间豪华别墅（context），生成两个佣人（bean）。然后在测试代码里面我们要做的就是指挥那个勤劳的佣人进行工作。一切都是那么的河蟹。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t通过ClassPathXmlApplicationContext的构造方法，传递一个spring xml文件名数组给它，spring看到这个数组就开始初始化上下文，生成jedisConnectionFactory对象和redisTemplate对象，并且返回一个ApplicationContext对象，从这个对象里面我们可能很轻松的获取那两个生成的对象。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t好，接下来看测试方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t从spring上下文中获取redisTemplate对象，获取该对象的成员变量，即ValueOperations对象，这个类是个泛型类，ValueOperations&lt;K, V&gt;，对应redis数据库的基础数据类型String，即key为字符串，value也是字符串。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t使用ValueOperations对象，可以进行redis对String类型的所有操作了，包括get，set，getex等操作，通过api就可以查到相关的接口方法。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t例子里采用最基础的get/set操作，相信大家也能看懂，就不多说了吧。\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t3. 总结\r\n</p>\r\n<p style=\"color:#333333;font-family:verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;\">\r\n\t入门例子，相对还是太简单了，深入学习还是需要掌握redis的很多基本命令，以及spring封装后对应的又是哪些接口的哪些方法。作为一个码农，面对新技术层出不穷、更新换代太快的情况，我只能说：任重而道远，且抠（抠腚，coding）且哈皮。\r\n</p>','akka',7);

#
# Structure for table "blog_blog_tag"
#

DROP TABLE IF EXISTS `blog_blog_tag`;
CREATE TABLE `blog_blog_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `blog_id` bigint(20) NOT NULL DEFAULT '0',
  `user_id` bigint(20) NOT NULL DEFAULT '0',
  `tag_name` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

#
# Data for table "blog_blog_tag"
#

INSERT INTO `blog_blog_tag` VALUES (1,'2015-03-28 10:53:19','2015-03-28 10:53:19',1,1,'的说法是地方'),(2,'2015-03-28 11:31:23','2015-03-28 11:31:23',4,1,'agg'),(3,'2015-03-28 11:31:23','2015-03-28 11:31:23',4,1,'标签2'),(4,'2015-03-28 11:31:23','2015-03-28 11:31:23',4,1,'标签8'),(5,'2015-03-28 20:41:09','2015-03-28 20:41:09',5,1,'架构'),(6,'2015-03-28 20:41:09','2015-03-28 20:41:09',5,1,'app'),(7,'2015-03-28 20:41:09','2015-03-28 20:41:09',5,1,'http'),(8,'2015-03-29 12:51:55','2015-03-29 12:51:55',6,1,'标签1'),(9,'2015-03-29 12:51:55','2015-03-29 12:51:55',6,1,'标签2'),(10,'2015-03-29 12:51:55','2015-03-29 12:51:55',6,1,'标签3'),(11,'2015-03-29 12:51:55','2015-03-29 12:51:55',6,1,'标签4'),(12,'2015-03-29 12:51:55','2015-03-29 12:51:55',6,1,'标签5'),(13,'2015-03-29 14:14:59','2015-03-29 14:14:59',7,1,'安防公司'),(14,'2015-03-29 14:14:59','2015-03-29 14:14:59',7,1,'标签10'),(15,'2015-03-29 14:14:59','2015-03-29 14:14:59',7,1,'标签9'),(16,'2015-03-29 14:35:15','2015-03-29 14:35:15',8,1,'redis'),(17,'2015-03-29 14:35:15','2015-03-29 14:35:15',10,1,'redis'),(18,'2015-03-29 14:35:16','2015-03-29 14:35:16',9,1,'redis'),(19,'2015-03-29 14:35:16','2015-03-29 14:35:16',11,1,'redis'),(20,'2015-03-29 14:35:16','2015-03-29 14:35:16',12,1,'redis'),(21,'2015-03-29 14:35:16','2015-03-29 14:35:16',13,1,'redis'),(22,'2015-03-29 14:35:16','2015-03-29 14:35:16',14,1,'redis');

#
# Structure for table "blog_category"
#

DROP TABLE IF EXISTS `blog_category`;
CREATE TABLE `blog_category` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `name` varchar(255) NOT NULL DEFAULT '',
  `user_id` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

#
# Data for table "blog_category"
#

INSERT INTO `blog_category` VALUES (1,'2015-03-28 10:53:19','2015-03-28 10:53:19','android开发',1),(2,'2015-03-28 11:20:59','2015-03-28 11:20:59','javaweb开发',1),(3,'2015-03-28 11:31:23','2015-03-28 11:31:23','快学scala',1),(4,'2015-03-28 20:38:06','2015-03-28 20:38:06','数据结构',1),(5,'2015-03-29 12:51:55','2015-03-29 12:51:55','测试新建分来',1),(6,'2015-03-29 14:14:59','2015-03-29 14:14:59','java',1),(7,'2015-03-29 14:35:13','2015-03-29 14:35:13','akka',1);

#
# Structure for table "proxy_proxy"
#

DROP TABLE IF EXISTS `proxy_proxy`;
CREATE TABLE `proxy_proxy` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ip` varchar(255) NOT NULL DEFAULT '',
  `port` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Data for table "proxy_proxy"
#


#
# Structure for table "task_task"
#

DROP TABLE IF EXISTS `task_task`;
CREATE TABLE `task_task` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `start_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `end_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `content` varchar(500) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Data for table "task_task"
#


#
# Structure for table "u_user"
#

DROP TABLE IF EXISTS `u_user`;
CREATE TABLE `u_user` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NULL DEFAULT '0000-00-00 00:00:00',
  `username` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `email_auth` int(11) DEFAULT '0',
  `salt` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

#
# Data for table "u_user"
#

INSERT INTO `u_user` VALUES (1,'2015-03-28 10:47:35','zhumengxiaoqi','huangshanqi0310@gmail.com','673e6155576770ca9cd633bc469df5153b506367',0,'21c000c8cf8c336f');

#
# Structure for table "weibo_weibo"
#

DROP TABLE IF EXISTS `weibo_weibo`;
CREATE TABLE `weibo_weibo` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `topic` varchar(255) DEFAULT NULL,
  `content` varchar(200) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

#
# Data for table "weibo_weibo"
#

